[{"content":"1 发起 HTTP 请求 发起 HTTP 请求的过程一般是先在浏览器中输入 URL，浏览器将网络请求发送给服务器，由服务器解析返回结果\n1.1 HTTP 请求原理 HTTP 请求是在客户端和 Web 服务器之间的交互请求，需要进行多次请求与确认\n（1）客户端连接到 Web 服务器，HTTP 客户端与 Web 服务器的 HTTP 端口（8080）建立一个 TCP套接字\n（2）发送 HTTP 请求，客户端通过 TCP 套接字向 Web 服务器发送一个文本请求报文（请求行、头、空行、体）\n（3）服务器接收请求并返回 HTTP 响应，Web 服务器解析请求，定位请求资源，客户端读取服务器写入 TCP 套接字的资源副本\n（4）释放 TCP 连接，若 connection 为 close 服务器主动 关闭 TCP 连接，客户端被动关闭连接，释放 TCP；connection 为 keepalive 连接会保持一段时间，该时间内可继续接收请求\n（5）客户端浏览器解析 HTML 内容\nTCP/IP 中三次握手建立一个可靠的连接服务\n（1）第一次握手，建立连接时客户端发送 SYN 包（SYN=1）到服务器进入 SYN_SENT 状态，等待服务器确认，SYN 为同步序列编号\n（2）第二次握手，服务器收到 SYN 包，确认客户的 SYN（ack=J+1）,ack是确认号，ACK为确认标识，同时自己也发送一个 SYN 包，服务器进入 SYN_RCVD 状态\n（3）第三次握手，客户端收到服务器的 SYN+ACK 包，向服务器发送确认包 (ack=K+1) ，客户端和服务器都进入 ESTABLISHED 状态\n1.2 Python 发起 HTTP 请求 自动化测试一般不会直接使用浏览器访问网页，而是使用工具或者程序脚本实现，python 使用类库发起一个 HTTP 请求非常容易。\n1. 使用 requests（基本封装了 urllib 库所有功能） 使用 requests 发起一个 HTTP 请求的实现\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #-*-coding:utf-8-*- import requests\t# 导入requests 库 # 使用 GET 方式请求个人网站 （得开梯子） response = requests.get(\u0026#34;https://xinen-hardwork.github.io/hugo-dev/zh-cn/\u0026#34;) # 打印响应结果 print(response) # 查看响应内容 # response.text 为 Unicode 格式的数据 print(response.text) # response.content 为 字节流数据 print(response.content) # 查看完整的 URL print(response.url) # 查看响应头部编码 print(response.encoding) # 查看响应码 print(response.status_code) 运行结果：\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;Response [200]\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;zh-cn\u0026#34; dir=\u0026#34;ltr\u0026#34;\u0026gt; ... \u0026lt;/html\u0026gt; b\u0026#39;\u0026lt;!DOCTYPE html\u0026gt;\\n\u0026lt;html lang=\u0026#34;zh-cn\u0026#34; dir=\u0026#34;ltr\u0026#34;\u0026gt;\\n ... \u0026lt;/script\u0026gt;\\n\\n \u0026lt;/body\u0026gt;\\n\u0026lt;/html\u0026gt;\\n\u0026#39; https://xinen-hardwork.github.io/hugo-dev/zh-cn/ utf-8 200 后续编写复杂功能代码时需要利用 status code 属性合理判断，并处理好 response.txt 中的文本内容\n2. 使用 urllib urllib 是 python 内置的 HTTP 请求类库，可直接使用，包含 4 个模块\n模块 描述 request 模拟发送请求 error 出现错误捕获异常 parse 对 URL 拆分解析 robotparser 识别网站的 robots.txt 文件，判断哪些文件会被爬虫处理 使用 urllib 的一个实现\n1 2 3 4 5 import urllib.request # 获取一个 HTTP 响应对象 response = urllib.request.urlopen(\u0026#34;https://xinen-hardwork.github.io/hugo-dev/zh-cn/\u0026#34;) print(response) 运行结果\n1 \u0026lt;http.client.HTTPResponse object at 0x00000289A1538A90\u0026gt; urllib 使用较复杂，传入参数也更多，建议使用 requests 包发起 HTTP 请求\n3. python 处理响应对象 获取响应对象后先判断状态码，对 text 属性设置编码，最后获取所需的文本，实现如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import requests\t# 导入requests 库 # 使用 GET 方式请求个人网站 （得开梯子） response = requests.get(\u0026#34;https://xinen-hardwork.github.io/hugo-dev/zh-cn/\u0026#34;) # 2. 检查状态码（确保请求成功） if response.status_code == 200: # 3. 设置响应文本编码（优先使用响应头声明的编码） response.encoding = response.apparent_encoding # 自动推断编码 # 或手动指定编码（如已知编码）： response.encoding = \u0026#39;utf-8\u0026#39; # 4. 获取文本内容 content = response.text print(\u0026#34;响应内容：\u0026#34;, content[:100]) # 打印前100字符避免刷屏 else: print(f\u0026#34;请求失败，状态码：{response.status_code}\u0026#34;) 运行结果\n1 2 3 4 响应内容： \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;zh-cn\u0026#34; dir=\u0026#34;ltr\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta name=\u0026#34;generator\u0026#34; content=\u0026#34;Hugo 0.147 ","date":"2025-05-21T20:17:40+08:00","permalink":"https://Xinen-hardwork.github.io/hugo-dev/zh-cn/p/python-http-%E6%8E%A5%E5%8F%A3%E7%BC%96%E7%A8%8B/","title":"Python HTTP 接口编程"},{"content":"1 测试方式分类 根据测试内容划，可划分为 4 类\n分类 描述 功能性测试 测试软件功能是否如预期一样正常，包含兼容性测试 性能测试 对系各项性能指标进行测试，如页面响应速度和渲染速度等 特性测试 测试不同平台的差异，如 PC 和移动端的兼容性差异 安全测试 测试数据传输和存储的安全性及访问资源的权限 RAD (Rap Application Development, 快速应用开发) 又称 V 模型，RAD 模型大体可以划分为下图的阶段\n根据测试级别，划分为 5 类\n分类 描述 单元测试 对单一接口或单元级别功能进行测试 集成测试 迭代过程中每次集成后进行的测试，保证每次小幅迭代的功能点都能被测试并通过验证 接口测试 对系统接口的测试，可使用 Mock 数据做冒烟测试 系统测试 根据系统设计书的指导对系统的功能点进行测试，发现软件潜在问题，保证系统正常运行 验收测试 根据功能说明书的功能点进行测试，保证产品顺利交付给用户（客户） W 模型增加了软件开发各阶段中同步进行的验证和确认活动\n2 自动化测试 自动化测试，将人工测试中重复的测试步骤实现机器化、代码化，避免人工操作与结果比较，并利用工具进行全面、可反复的测试回溯的方法\n“ 三层金字塔” 的分层自动化测试模型\n分层 实践 UI 层 人工测试及用户界面的自动化测试 Service 层 通过自动化框架或工具进行接口测试 Unit 层 基于最小模块进行单元测试 3 Python自动化测试 单元测试框架，Java 的 JUnit 和 TestNG，PHP 的 PHPUnit, Python 的 unittest 和 pytest等\nPython 适合做自动化测试的优势：\n① Python 自动化测试脚本编写简单方便\n② 有成熟的自动化框架（Selenium 等）\n③ 丰富的类库支持（HTTP网络请求、文件流处理、Socket编程、多线程等）\nPython 自动化测试实际应用\n4 接口测试和UI测试 接口测试，对某个服务的函数或者对外暴露的访问接口进行测试，测试的目的是检测该接口是否稳定可靠以及是否符合预设的用例测试结构。一般分为下面3种：\n基于 HTTP 接口测试\n基于 Web 服务的接口测试\n基于其他通信协议的接口测试（Websocket 等）\nUI 测试，基于用户界面进行测试，需要针对页面的特定内容和功能进行。根据平台不同，可分为 Web 端 UI 测试和移动端 UI 测试\nWeb 端 UI测试\n① Web 整体页面测试\n② Web 内容测试\n③ Web 导航测试\n④ Web 图形测试\n⑤ Web 表单测试\n⑥ Web 兼容性测试（多平台兼容行）\n移动端 UI 测试\n① 基础功能测试，注意边界值、异常数据等。分析需求和功能要求，对流程梳理，以跑通基础功能为主\n② 数据交互测试，对页面上的数据流进行测试（也要测边界和特殊值）\n③ 性能测试，页面响应速度、资源加载、流量消耗、CPU占有率、电量的变化及APP稳定性的测试\n接口测试和 UI 测试的差异对比\n对比项 接口测试 UI测试 涉及页面 NO YES 需要跨平台测试 NO YES 复杂度 LOW HIGH 性能要求 MIDDLE HIGH ","date":"2025-05-21T15:27:03+08:00","permalink":"https://Xinen-hardwork.github.io/hugo-dev/zh-cn/p/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/","title":"自动化测试基础"}]